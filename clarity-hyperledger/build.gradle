plugins {
    id "org.zeroturnaround.gradle.jrebel" version "1.1.8"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
}


group = 'com.clarity'
version = '0.0.1-SNAPSHOT'
description = 'Hyperledger'

ext {
    micronautVersion = "1.2.0"
    mapstructVersion = '1.3.0.Final'
}

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}


java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    sourceSets {
        "main" {
            java.srcDir("src/main/java")
            resources.srcDir("resources")
            setBuildDir(file("target"))
            output.dir(file("$buildDir/$name"))
            java.outputDir = file("$buildDir/$name")
        }
        "test" {
            java.srcDir("test/java")
            resources.srcDir("test-resources")
            setBuildDir(file("target"))
            output.dir(file("$buildDir/$name"))
            java.outputDir = file("$buildDir/$name")
        }
    }
}

idea {
    module {
        // use the same output folders as gradle, so the pythonDevelop task works correctly
        buildDir = file("target")
        outputDir = sourceSets["main"].output.classesDirs.singleFile
        testOutputDir = sourceSets["test"].output.classesDirs.singleFile
        inheritOutputDirs = false
    }
}



dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.opentracing.brave:brave-opentracing"
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    implementation "io.micronaut:micronaut-tracing"
    implementation "io.micronaut:micronaut-security-jwt"
    compile 'com.clarity:clarityshared:0.0.1-SNAPSHOT'
    implementation "io.micronaut.configuration:micronaut-hibernate-jpa"
    implementation "io.micronaut.configuration:micronaut-jdbc-tomcat"
    implementation "io.micronaut:micronaut-discovery-client"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.configuration:micronaut-mongo-reactive"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.configuration:micronaut-kafka"
    implementation "io.micronaut:micronaut-http-server-netty"
    runtimeOnly "io.zipkin.brave:brave-instrumentation-http"
    runtimeOnly "io.zipkin.reporter2:zipkin-reporter"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "clarity.hyperledger.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
run.dependsOn(generateRebel)
if (project.hasProperty('rebelAgent')) {
    run.jvmArgs += rebelAgent
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
buildDir = 'target'
